name: Run Python script and save CSV file

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout main repo
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Specifica la versione di Python desiderata
        
    - name: Clone repository developersInactivityAnalysis
      run: |
        git clone https://github.com/domenico-77/developersInactivityAnalysis.git
        cd developersInactivityAnalysis
        git checkout tubvic
      # Sostituisci USERNAME con il tuo nome utente GitHub e REPO_NAME con il nome del repository contenente crea_csv.py

    - name: Install dependencies
      if: $ {{ steps.cache-python-deps.outputs.cache-hit != 'true' }}
      run: python -m pip install -r developersInactivityAnalysis/requirements.txt
      # Installiamo le dipendenze solo se la cache non è stata colpita

    - name: Cache Python dependencies
      if: ${{ steps.cache-python-deps.outputs.cache-hit != 'true' }}
      id: cache-python-deps2
      uses: actions/cache@v3
      env:
          cache-name: cache-python-modules
      with:
        path: $ {{ steps.cache-python-deps.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('developersInactivityAnalysis/requirements.txt') }}
        restore-keys:
          ${{ runner.os }}-pip-${{ hashFiles('developersInactivityAnalysis/requirements.txt') }}
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
      # Salviamo la cache delle dipendenze Python basandoci sul file requirements.txt
      
    - name: Set Python Path for Cached Dependencies
      if: ${{ steps.cache-python-deps.outputs.cache-hit == 'true' }}
      run: |
        echo "export PATH=$HOME/.cache/pip:$PATH" >> $GITHUB_ENV
        # Aggiungi il percorso della cache delle dipendenze al sistema di riferimento delle variabili di ambiente

    - name: Run Python script
      run: python3 developersInactivityAnalysis/CoreSelection/LocalNonDocCommitExtractor.py https://github.com/github-linguist/linguist.git
      timeout-minutes: 340  # Imposta il timeout per questo passaggio
      continue-on-error: true
      # Assicurati che il percorso sia corretto, in base alla posizione del tuo file crea_csv.py nel repository clonato
      
    - name: Archivia i dati come artefatto
      if: ${{ failure() }} #si avvia solo se quello di prima è stato interrotto
      uses: actions/upload-artifact@v2
      with:
       name: LocalNonDocCommitExtractor-artifact
       path: developersInactivityAnalysis/A80_Results/linguist


    - name: Move CSV file to main repository
      if: ${{ success() }} #si avvia solo se quello prima ha concluso
      run: | 
        mv developersInactivityAnalysis/A80_Results/linguist output
      # Spostiamo il file CSV generato nella directory output del repository principale

    - name: Commit changes
      if: ${{ success() }} #si avvia solo se quello prima ha concluso
      run: |        
        git config --local user.name "domenico-77"
        git config --local user.email "d.vicenti1@studenti.uniba.it"
        git add output
        git commit -m "Add CSV file generated by GitHub Action"
        git push
